// Top of file
buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:7.1.2'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'com.kbskyblock'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' } // Added Spigot public group
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.papermc.io/repository/maven-public/' } // Added PaperMC repo
    }

    dependencies {
        // Apply these dependencies only if the project is not 'common' or 'default' or 'v1_10_R1'
        if (project.name != 'common' && project.name != 'default' && project.name != 'v1_10_R1') {
            implementation 'com.github.cryptomorin:XSeries:9.8.0'
            compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
            compileOnly('com.github.MilkBowl:VaultAPI:1.7') {
                exclude group: 'org.bukkit', module: 'bukkit'
            }
        } else {
            // For 'common' and 'default' projects, only apply XSeries and Vault if needed,
            // but not the conflicting SpigotAPI from this core/build.gradle
            implementation 'com.github.cryptomorin:XSeries:9.8.0'
            compileOnly('com.github.MilkBowl:VaultAPI:1.7') {
                exclude group: 'org.bukkit', module: 'bukkit'
            }
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release = 21
    }
}

// Server run task
task runServer(type: JavaExec) {
    dependsOn ':plugin:shadowJar'
    group = "Execution"
    description = "Runs the server with your plugin"
    classpath = files('run/server.jar') // Path to your server jar
    mainClass = "org.bukkit.craftbukkit.Main"
    args 'nogui'
    workingDir = file('run')

    doFirst {
        mkdir 'run/plugins'
        copy {
            from project(':plugin').tasks.shadowJar.archiveFile
            into 'run/plugins'
        }
    }
}